--[[
debug7/MSASDKK
]]--
local StrToNumber = tonumber;
local Byte = string.byte;
local Char = string.char;
local Sub = string.sub;
local Subg = string.gsub;
local Rep = string.rep;
local Concat = table.concat;
local Insert = table.insert;
local LDExp = math.ldexp;
local GetFEnv = getfenv or function()
	return _ENV;
end;
local Setmetatable = setmetatable;
local PCall = pcall;
local Select = select;
local Unpack = unpack or table.unpack;
local ToNumber = tonumber;
local function VMCall(ByteString, vmenv, ...)
	local DIP = 1;
	local repeatNext;
	ByteString = Subg(Sub(ByteString, 5), "..", function(byte)
		if (Byte(byte, 2) == 81) then
			repeatNext = StrToNumber(Sub(byte, 1, 1));
			return "";
		else
			local a = Char(StrToNumber(byte, 16));
			if repeatNext then
				local b = Rep(a, repeatNext);
				repeatNext = nil;
				return b;
			else
				return a;
			end
		end
	end);
	local function gBit(Bit, Start, End)
		if End then
			local Res = (Bit / (2 ^ (Start - 1))) % (2 ^ (((End - 1) - (Start - 1)) + 1));
			return Res - (Res % 1);
		else
			local Plc = 2 ^ (Start - 1);
			return (((Bit % (Plc + Plc)) >= Plc) and 1) or 0;
		end
	end
	local function gBits8()
		local a = Byte(ByteString, DIP, DIP);
		DIP = DIP + 1;
		return a;
	end
	local function gBits16()
		local a, b = Byte(ByteString, DIP, DIP + 2);
		DIP = DIP + 2;
		return (b * 256) + a;
	end
	local function gBits32()
		local a, b, c, d = Byte(ByteString, DIP, DIP + 3);
		DIP = DIP + 4;
		return (d * 16777216) + (c * 65536) + (b * 256) + a;
	end
	local function gFloat()
		local Left = gBits32();
		local Right = gBits32();
		local IsNormal = 1;
		local Mantissa = (gBit(Right, 1, 20) * (2 ^ 32)) + Left;
		local Exponent = gBit(Right, 21, 31);
		local Sign = ((gBit(Right, 32) == 1) and -1) or 1;
		if (Exponent == 0) then
			if (Mantissa == 0) then
				return Sign * 0;
			else
				Exponent = 1;
				IsNormal = 0;
			end
		elseif (Exponent == 2047) then
			return ((Mantissa == 0) and (Sign * (1 / 0))) or (Sign * NaN);
		end
		return LDExp(Sign, Exponent - 1023) * (IsNormal + (Mantissa / (2 ^ 52)));
	end
	local function gString(Len)
		local Str;
		if not Len then
			Len = gBits32();
			if (Len == 0) then
				return "";
			end
		end
		Str = Sub(ByteString, DIP, (DIP + Len) - 1);
		DIP = DIP + Len;
		local FStr = {};
		for Idx = 1, #Str do
			FStr[Idx] = Char(Byte(Sub(Str, Idx, Idx)));
		end
		return Concat(FStr);
	end
	local gInt = gBits32;
	local function _R(...)
		return {...}, Select("#", ...);
	end
	local function Deserialize()
		local Instrs = {};
		local Functions = {};
		local Lines = {};
		local Chunk = {Instrs,Functions,nil,Lines};
		local ConstCount = gBits32();
		local Consts = {};
		for Idx = 1, ConstCount do
			local Type = gBits8();
			local Cons;
			if (Type == 1) then
				Cons = gBits8() ~= 0;
			elseif (Type == 2) then
				Cons = gFloat();
			elseif (Type == 3) then
				Cons = gString();
			end
			Consts[Idx] = Cons;
		end
		Chunk[3] = gBits8();
		for Idx = 1, gBits32() do
			local Descriptor = gBits8();
			if (gBit(Descriptor, 1, 1) == 0) then
				local Type = gBit(Descriptor, 2, 3);
				local Mask = gBit(Descriptor, 4, 6);
				local Inst = {gBits16(),gBits16(),nil,nil};
				if (Type == 0) then
					Inst[3] = gBits16();
					Inst[4] = gBits16();
				elseif (Type == 1) then
					Inst[3] = gBits32();
				elseif (Type == 2) then
					Inst[3] = gBits32() - (2 ^ 16);
				elseif (Type == 3) then
					Inst[3] = gBits32() - (2 ^ 16);
					Inst[4] = gBits16();
				end
				if (gBit(Mask, 1, 1) == 1) then
					Inst[2] = Consts[Inst[2]];
				end
				if (gBit(Mask, 2, 2) == 1) then
					Inst[3] = Consts[Inst[3]];
				end
				if (gBit(Mask, 3, 3) == 1) then
					Inst[4] = Consts[Inst[4]];
				end
				Instrs[Idx] = Inst;
			end
		end
		for Idx = 1, gBits32() do
			Functions[Idx - 1] = Deserialize();
		end
		return Chunk;
	end
	local function Wrap(Chunk, Upvalues, Env)
		local Instr = Chunk[1];
		local Proto = Chunk[2];
		local Params = Chunk[3];
		return function(...)
			local Instr = Instr;
			local Proto = Proto;
			local Params = Params;
			local _R = _R;
			local VIP = 1;
			local Top = -1;
			local Vararg = {};
			local Args = {...};
			local PCount = Select("#", ...) - 1;
			local Lupvals = {};
			local Stk = {};
			for Idx = 0, PCount do
				if (Idx >= Params) then
					Vararg[Idx - Params] = Args[Idx + 1];
				else
					Stk[Idx] = Args[Idx + 1];
				end
			end
			local Varargsz = (PCount - Params) + 1;
			local Inst;
			local Enum;
			while true do
				Inst = Instr[VIP];
				Enum = Inst[1];
				if (Enum <= 59) then
					if (Enum <= 29) then
						if (Enum <= 14) then
							if (Enum <= 6) then
								if (Enum <= 2) then
									if (Enum <= 0) then
										Stk[Inst[2]] = Inst[3];
									elseif (Enum == 1) then
										local A = Inst[2];
										local T = Stk[A];
										for Idx = A + 1, Top do
											Insert(T, Stk[Idx]);
										end
									else
										Stk[Inst[2]] = Inst[3] ~= 0;
									end
								elseif (Enum <= 4) then
									if (Enum > 3) then
										local A = Inst[2];
										local Results, Limit = _R(Stk[A]());
										Top = (Limit + A) - 1;
										local Edx = 0;
										for Idx = A, Top do
											Edx = Edx + 1;
											Stk[Idx] = Results[Edx];
										end
									elseif Stk[Inst[2]] then
										VIP = VIP + 1;
									else
										VIP = Inst[3];
									end
								elseif (Enum > 5) then
									Stk[Inst[2]] = Stk[Inst[3]] / Inst[4];
								elseif (Inst[2] < Stk[Inst[4]]) then
									VIP = VIP + 1;
								else
									VIP = Inst[3];
								end
							elseif (Enum <= 10) then
								if (Enum <= 8) then
									if (Enum == 7) then
										local A = Inst[2];
										do
											return Stk[A](Unpack(Stk, A + 1, Inst[3]));
										end
									else
										Env[Inst[3]] = Stk[Inst[2]];
									end
								elseif (Enum == 9) then
									Stk[Inst[2]] = Env[Inst[3]];
								else
									Stk[Inst[2]] = Stk[Inst[3]] % Stk[Inst[4]];
								end
							elseif (Enum <= 12) then
								if (Enum > 11) then
									Stk[Inst[2]] = -Stk[Inst[3]];
								else
									Stk[Inst[2]] = Stk[Inst[3]] + Stk[Inst[4]];
								end
							elseif (Enum > 13) then
								if (Stk[Inst[2]] < Stk[Inst[4]]) then
									VIP = VIP + 1;
								else
									VIP = Inst[3];
								end
							elseif (Stk[Inst[2]] == Inst[4]) then
								VIP = VIP + 1;
							else
								VIP = Inst[3];
							end
						elseif (Enum <= 21) then
							if (Enum <= 17) then
								if (Enum <= 15) then
									local A = Inst[2];
									local T = Stk[A];
									for Idx = A + 1, Top do
										Insert(T, Stk[Idx]);
									end
								elseif (Enum > 16) then
									if not Stk[Inst[2]] then
										VIP = VIP + 1;
									else
										VIP = Inst[3];
									end
								else
									Stk[Inst[2]] = Inst[3] + Stk[Inst[4]];
								end
							elseif (Enum <= 19) then
								if (Enum > 18) then
									local A = Inst[2];
									local C = Inst[4];
									local CB = A + 2;
									local Result = {Stk[A](Stk[A + 1], Stk[CB])};
									for Idx = 1, C do
										Stk[CB + Idx] = Result[Idx];
									end
									local R = Result[1];
									if R then
										Stk[CB] = R;
										VIP = Inst[3];
									else
										VIP = VIP + 1;
									end
								else
									Stk[Inst[2]]();
								end
							elseif (Enum == 20) then
								Stk[Inst[2]] = Stk[Inst[3]] + Inst[4];
							else
								Stk[Inst[2]] = Stk[Inst[3]];
							end
						elseif (Enum <= 25) then
							if (Enum <= 23) then
								if (Enum > 22) then
									if (Stk[Inst[2]] < Inst[4]) then
										VIP = VIP + 1;
									else
										VIP = Inst[3];
									end
								else
									local A = Inst[2];
									Stk[A] = Stk[A](Unpack(Stk, A + 1, Inst[3]));
								end
							elseif (Enum == 24) then
								VIP = Inst[3];
							else
								Stk[Inst[2]] = Inst[3] ^ Stk[Inst[4]];
							end
						elseif (Enum <= 27) then
							if (Enum > 26) then
								Stk[Inst[2]] = Stk[Inst[3]] - Inst[4];
							else
								local A = Inst[2];
								Stk[A] = Stk[A](Unpack(Stk, A + 1, Inst[3]));
							end
						elseif (Enum == 28) then
							Stk[Inst[2]][Inst[3]] = Inst[4];
						elseif (Inst[2] <= Stk[Inst[4]]) then
							VIP = VIP + 1;
						else
							VIP = Inst[3];
						end
					elseif (Enum <= 44) then
						if (Enum <= 36) then
							if (Enum <= 32) then
								if (Enum <= 30) then
									Stk[Inst[2]] = Stk[Inst[3]] % Inst[4];
								elseif (Enum > 31) then
									Stk[Inst[2]] = Stk[Inst[3]] % Stk[Inst[4]];
								else
									do
										return;
									end
								end
							elseif (Enum <= 34) then
								if (Enum == 33) then
									if (Stk[Inst[2]] <= Stk[Inst[4]]) then
										VIP = VIP + 1;
									else
										VIP = Inst[3];
									end
								else
									Stk[Inst[2]] = Stk[Inst[3]] % Inst[4];
								end
							elseif (Enum == 35) then
								local A = Inst[2];
								Stk[A](Unpack(Stk, A + 1, Top));
							else
								Stk[Inst[2]] = Upvalues[Inst[3]];
							end
						elseif (Enum <= 40) then
							if (Enum <= 38) then
								if (Enum > 37) then
									local A = Inst[2];
									local Results, Limit = _R(Stk[A](Stk[A + 1]));
									Top = (Limit + A) - 1;
									local Edx = 0;
									for Idx = A, Top do
										Edx = Edx + 1;
										Stk[Idx] = Results[Edx];
									end
								else
									Stk[Inst[2]] = Stk[Inst[3]] - Stk[Inst[4]];
								end
							elseif (Enum > 39) then
								local A = Inst[2];
								do
									return Unpack(Stk, A, Top);
								end
							else
								Upvalues[Inst[3]] = Stk[Inst[2]];
							end
						elseif (Enum <= 42) then
							if (Enum == 41) then
								local A = Inst[2];
								local Results = {Stk[A](Stk[A + 1])};
								local Edx = 0;
								for Idx = A, Inst[4] do
									Edx = Edx + 1;
									Stk[Idx] = Results[Edx];
								end
							elseif (Inst[2] < Stk[Inst[4]]) then
								VIP = VIP + 1;
							else
								VIP = Inst[3];
							end
						elseif (Enum > 43) then
							local A = Inst[2];
							Stk[A](Unpack(Stk, A + 1, Inst[3]));
						else
							local A = Inst[2];
							Stk[A](Unpack(Stk, A + 1, Inst[3]));
						end
					elseif (Enum <= 51) then
						if (Enum <= 47) then
							if (Enum <= 45) then
								Stk[Inst[2]][Stk[Inst[3]]] = Stk[Inst[4]];
							elseif (Enum == 46) then
								local NewProto = Proto[Inst[3]];
								local NewUvals;
								local Indexes = {};
								NewUvals = Setmetatable({}, {__index=function(_, Key)
									local Val = Indexes[Key];
									return Val[1][Val[2]];
								end,__newindex=function(_, Key, Value)
									local Val = Indexes[Key];
									Val[1][Val[2]] = Value;
								end});
								for Idx = 1, Inst[4] do
									VIP = VIP + 1;
									local Mvm = Instr[VIP];
									if (Mvm[1] == 101) then
										Indexes[Idx - 1] = {Stk,Mvm[3]};
									else
										Indexes[Idx - 1] = {Upvalues,Mvm[3]};
									end
									Lupvals[#Lupvals + 1] = Indexes;
								end
								Stk[Inst[2]] = Wrap(NewProto, NewUvals, Env);
							else
								Stk[Inst[2]][Inst[3]] = Stk[Inst[4]];
							end
						elseif (Enum <= 49) then
							if (Enum > 48) then
								if Stk[Inst[2]] then
									VIP = VIP + 1;
								else
									VIP = Inst[3];
								end
							else
								Stk[Inst[2]] = Inst[3] ~= 0;
							end
						elseif (Enum > 50) then
							Stk[Inst[2]] = Inst[3];
						else
							local A = Inst[2];
							do
								return Stk[A](Unpack(Stk, A + 1, Inst[3]));
							end
						end
					elseif (Enum <= 55) then
						if (Enum <= 53) then
							if (Enum == 52) then
								local A = Inst[2];
								local Results, Limit = _R(Stk[A]());
								Top = (Limit + A) - 1;
								local Edx = 0;
								for Idx = A, Top do
									Edx = Edx + 1;
									Stk[Idx] = Results[Edx];
								end
							else
								Stk[Inst[2]][Inst[3]] = Stk[Inst[4]];
							end
						elseif (Enum == 54) then
							Env[Inst[3]] = Stk[Inst[2]];
						else
							local A = Inst[2];
							Stk[A](Stk[A + 1]);
						end
					elseif (Enum <= 57) then
						if (Enum > 56) then
							local A = Inst[2];
							Stk[A] = Stk[A](Stk[A + 1]);
						else
							Stk[Inst[2]] = Stk[Inst[3]] - Inst[4];
						end
					elseif (Enum > 58) then
						local A = Inst[2];
						local Index = Stk[A];
						local Step = Stk[A + 2];
						if (Step > 0) then
							if (Index > Stk[A + 1]) then
								VIP = Inst[3];
							else
								Stk[A + 3] = Index;
							end
						elseif (Index < Stk[A + 1]) then
							VIP = Inst[3];
						else
							Stk[A + 3] = Index;
						end
					else
						Stk[Inst[2]] = #Stk[Inst[3]];
					end
				elseif (Enum <= 89) then
					if (Enum <= 74) then
						if (Enum <= 66) then
							if (Enum <= 62) then
								if (Enum <= 60) then
									if (Stk[Inst[2]] == Inst[4]) then
										VIP = VIP + 1;
									else
										VIP = Inst[3];
									end
								elseif (Enum > 61) then
									Stk[Inst[2]] = Inst[3] * Stk[Inst[4]];
								else
									Stk[Inst[2]]();
								end
							elseif (Enum <= 64) then
								if (Enum == 63) then
									Stk[Inst[2]] = Stk[Inst[3]] - Stk[Inst[4]];
								else
									local A = Inst[2];
									Stk[A](Unpack(Stk, A + 1, Top));
								end
							elseif (Enum > 65) then
								Stk[Inst[2]] = Stk[Inst[3]][Stk[Inst[4]]];
							else
								local A = Inst[2];
								local Step = Stk[A + 2];
								local Index = Stk[A] + Step;
								Stk[A] = Index;
								if (Step > 0) then
									if (Index <= Stk[A + 1]) then
										VIP = Inst[3];
										Stk[A + 3] = Index;
									end
								elseif (Index >= Stk[A + 1]) then
									VIP = Inst[3];
									Stk[A + 3] = Index;
								end
							end
						elseif (Enum <= 70) then
							if (Enum <= 68) then
								if (Enum > 67) then
									local A = Inst[2];
									do
										return Unpack(Stk, A, Top);
									end
								else
									Stk[Inst[2]] = Env[Inst[3]];
								end
							elseif (Enum > 69) then
								Stk[Inst[2]] = {};
							elseif (Inst[2] <= Stk[Inst[4]]) then
								VIP = VIP + 1;
							else
								VIP = Inst[3];
							end
						elseif (Enum <= 72) then
							if (Enum > 71) then
								Stk[Inst[2]][Inst[3]] = Inst[4];
							else
								Stk[Inst[2]] = Inst[3] + Stk[Inst[4]];
							end
						elseif (Enum > 73) then
							if (Stk[Inst[2]] < Stk[Inst[4]]) then
								VIP = VIP + 1;
							else
								VIP = Inst[3];
							end
						else
							Stk[Inst[2]][Stk[Inst[3]]] = Stk[Inst[4]];
						end
					elseif (Enum <= 81) then
						if (Enum <= 77) then
							if (Enum <= 75) then
								for Idx = Inst[2], Inst[3] do
									Stk[Idx] = nil;
								end
							elseif (Enum > 76) then
								Stk[Inst[2]] = Stk[Inst[3]] + Inst[4];
							else
								local A = Inst[2];
								local Results, Limit = _R(Stk[A](Unpack(Stk, A + 1, Top)));
								Top = (Limit + A) - 1;
								local Edx = 0;
								for Idx = A, Top do
									Edx = Edx + 1;
									Stk[Idx] = Results[Edx];
								end
							end
						elseif (Enum <= 79) then
							if (Enum == 78) then
								local A = Inst[2];
								local Index = Stk[A];
								local Step = Stk[A + 2];
								if (Step > 0) then
									if (Index > Stk[A + 1]) then
										VIP = Inst[3];
									else
										Stk[A + 3] = Index;
									end
								elseif (Index < Stk[A + 1]) then
									VIP = Inst[3];
								else
									Stk[A + 3] = Index;
								end
							else
								Stk[Inst[2]] = {};
							end
						elseif (Enum > 80) then
							do
								return Stk[Inst[2]];
							end
						else
							local A = Inst[2];
							local C = Inst[4];
							local CB = A + 2;
							local Result = {Stk[A](Stk[A + 1], Stk[CB])};
							for Idx = 1, C do
								Stk[CB + Idx] = Result[Idx];
							end
							local R = Result[1];
							if R then
								Stk[CB] = R;
								VIP = Inst[3];
							else
								VIP = VIP + 1;
							end
						end
					elseif (Enum <= 85) then
						if (Enum <= 83) then
							if (Enum == 82) then
								do
									return Stk[Inst[2]];
								end
							else
								VIP = Inst[3];
							end
						elseif (Enum == 84) then
							local A = Inst[2];
							local Results, Limit = _R(Stk[A](Unpack(Stk, A + 1, Inst[3])));
							Top = (Limit + A) - 1;
							local Edx = 0;
							for Idx = A, Top do
								Edx = Edx + 1;
								Stk[Idx] = Results[Edx];
							end
						else
							local A = Inst[2];
							local Step = Stk[A + 2];
							local Index = Stk[A] + Step;
							Stk[A] = Index;
							if (Step > 0) then
								if (Index <= Stk[A + 1]) then
									VIP = Inst[3];
									Stk[A + 3] = Index;
								end
							elseif (Index >= Stk[A + 1]) then
								VIP = Inst[3];
								Stk[A + 3] = Index;
							end
						end
					elseif (Enum <= 87) then
						if (Enum == 86) then
							Stk[Inst[2]] = Upvalues[Inst[3]];
						else
							do
								return;
							end
						end
					elseif (Enum == 88) then
						local A = Inst[2];
						Stk[A] = Stk[A](Unpack(Stk, A + 1, Top));
					else
						Stk[Inst[2]][Stk[Inst[3]]] = Inst[4];
					end
				elseif (Enum <= 104) then
					if (Enum <= 96) then
						if (Enum <= 92) then
							if (Enum <= 90) then
								Stk[Inst[2]] = Inst[3] * Stk[Inst[4]];
							elseif (Enum == 91) then
								local A = Inst[2];
								local Results, Limit = _R(Stk[A](Stk[A + 1]));
								Top = (Limit + A) - 1;
								local Edx = 0;
								for Idx = A, Top do
									Edx = Edx + 1;
									Stk[Idx] = Results[Edx];
								end
							elseif not Stk[Inst[2]] then
								VIP = VIP + 1;
							else
								VIP = Inst[3];
							end
						elseif (Enum <= 94) then
							if (Enum > 93) then
								Stk[Inst[2]] = Stk[Inst[3]] * Stk[Inst[4]];
							elseif (Stk[Inst[2]] ~= Stk[Inst[4]]) then
								VIP = VIP + 1;
							else
								VIP = Inst[3];
							end
						elseif (Enum == 95) then
							Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
						else
							Stk[Inst[2]] = Inst[3] ^ Stk[Inst[4]];
						end
					elseif (Enum <= 100) then
						if (Enum <= 98) then
							if (Enum > 97) then
								Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
							else
								local A = Inst[2];
								local Results = {Stk[A](Stk[A + 1])};
								local Edx = 0;
								for Idx = A, Inst[4] do
									Edx = Edx + 1;
									Stk[Idx] = Results[Edx];
								end
							end
						elseif (Enum == 99) then
							if (Stk[Inst[2]] < Inst[4]) then
								VIP = VIP + 1;
							else
								VIP = Inst[3];
							end
						else
							for Idx = Inst[2], Inst[3] do
								Stk[Idx] = nil;
							end
						end
					elseif (Enum <= 102) then
						if (Enum > 101) then
							local A = Inst[2];
							Stk[A](Stk[A + 1]);
						else
							Stk[Inst[2]] = Stk[Inst[3]];
						end
					elseif (Enum > 103) then
						Upvalues[Inst[3]] = Stk[Inst[2]];
					else
						Stk[Inst[2]] = -Stk[Inst[3]];
					end
				elseif (Enum <= 111) then
					if (Enum <= 107) then
						if (Enum <= 105) then
							local NewProto = Proto[Inst[3]];
							local NewUvals;
							local Indexes = {};
							NewUvals = Setmetatable({}, {__index=function(_, Key)
								local Val = Indexes[Key];
								return Val[1][Val[2]];
							end,__newindex=function(_, Key, Value)
								local Val = Indexes[Key];
								Val[1][Val[2]] = Value;
							end});
							for Idx = 1, Inst[4] do
								VIP = VIP + 1;
								local Mvm = Instr[VIP];
								if (Mvm[1] == 101) then
									Indexes[Idx - 1] = {Stk,Mvm[3]};
								else
									Indexes[Idx - 1] = {Upvalues,Mvm[3]};
								end
								Lupvals[#Lupvals + 1] = Indexes;
							end
							Stk[Inst[2]] = Wrap(NewProto, NewUvals, Env);
						elseif (Enum == 106) then
							local A = Inst[2];
							do
								return Unpack(Stk, A, A + Inst[3]);
							end
						else
							local A = Inst[2];
							local B = Stk[Inst[3]];
							Stk[A + 1] = B;
							Stk[A] = B[Inst[4]];
						end
					elseif (Enum <= 109) then
						if (Enum > 108) then
							Stk[Inst[2]] = #Stk[Inst[3]];
						else
							Stk[Inst[2]] = Stk[Inst[3]] + Stk[Inst[4]];
						end
					elseif (Enum == 110) then
						Stk[Inst[2]] = Stk[Inst[3]][Stk[Inst[4]]];
					else
						local A = Inst[2];
						local Results, Limit = _R(Stk[A](Unpack(Stk, A + 1, Top)));
						Top = (Limit + A) - 1;
						local Edx = 0;
						for Idx = A, Top do
							Edx = Edx + 1;
							Stk[Idx] = Results[Edx];
						end
					end
				elseif (Enum <= 115) then
					if (Enum <= 113) then
						if (Enum == 112) then
							Stk[Inst[2]] = Stk[Inst[3]] / Inst[4];
						else
							local A = Inst[2];
							Stk[A] = Stk[A](Stk[A + 1]);
						end
					elseif (Enum > 114) then
						local A = Inst[2];
						Stk[A] = Stk[A](Unpack(Stk, A + 1, Top));
					elseif (Stk[Inst[2]] ~= Stk[Inst[4]]) then
						VIP = VIP + 1;
					else
						VIP = Inst[3];
					end
				elseif (Enum <= 117) then
					if (Enum > 116) then
						Stk[Inst[2]][Stk[Inst[3]]] = Inst[4];
					elseif (Stk[Inst[2]] <= Stk[Inst[4]]) then
						VIP = VIP + 1;
					else
						VIP = Inst[3];
					end
				elseif (Enum > 118) then
					local A = Inst[2];
					local Results, Limit = _R(Stk[A](Unpack(Stk, A + 1, Inst[3])));
					Top = (Limit + A) - 1;
					local Edx = 0;
					for Idx = A, Top do
						Edx = Edx + 1;
						Stk[Idx] = Results[Edx];
					end
				else
					local A = Inst[2];
					local B = Stk[Inst[3]];
					Stk[A + 1] = B;
					Stk[A] = B[Inst[4]];
				end
				VIP = VIP + 1;
			end
		end;
	end
	return Wrap(Deserialize(), {}, vmenv)(...);
end
return VMCall("LOL!833Q0003053Q006269743332026Q002Q40027Q004003043Q00626E6F7403043Q0062616E642Q033Q00626F7203043Q0062786F7203063Q006C736869667403063Q0072736869667403073Q00617273686966742Q033Q0062697403063Q00737472696E6703043Q006368617203043Q00627974652Q033Q0073756203053Q007461626C6503063Q00636F6E63617403063Q00696E7365727403023Q005F4703023Q0058702Q01030F3Q0064697361626C6553682Q6F74696E670100030A3Q004D756C7469706C696572026Q005E4003083Q004175746F506C617903093Q004175746F53682Q6F74030B3Q004368616E676556616C7565026Q003E4003043Q0067616D6503073Q00506C6179657273030B3Q004C6F63616C506C6179657203043Q004E616D65030A3Q00506C617965724461746103073Q00E1CFDA3CE3A99603083Q007EB1A3BB4586DBA703073Q0013C12BDCF9319F03053Q009C43AD4AA503053Q007072696E7403273Q001AB85D56A82E4374B44604AE234520F7591ABD3F4326F90935A9345431B95D56AC2A472DB25B4C03073Q002654D72976DC46030A3Q0047657453657276696365030B3Q00661F3006EB511A1701FB4203053Q009E30764272030A3Q009830112467A0E98C311903073Q009BCB44705613C503073Q00536574436F726503103Q0075D838F86E772QF140D435FD5471EAF603083Q009826BD569C20188503053Q00C85EB34AF903043Q00269C37C703083Q00897368215E55DC6803083Q0023C81D1C4873149A03043Q002DBAC9CB03073Q005479DFB1BFED4C03103Q008855DBA92A4470E0B842C0B63B4435C503083Q00A1DB36A9C05A305003083Q006D5712245D4B0F2B03043Q0045292260026Q00144003053Q0049646C656403073Q00436F2Q6E656374026Q00F03F03153Q009FCBD604052EFCF1D20B0632FCF0D21E1622B22QC403063Q004BDCA3B76A6203113Q0030BF9B3BD001BB9F32DD31AE8425D805BF03053Q00B962DAEB57030C3Q0057616974466F724368696C6403073Q00F9392AE9CAAFD803063Q00CAAB5C4786BE03073Q0004C0258667F30903043Q00E849A14C03073Q00506C6163654964022Q00C83A3D7E0C4203263Q0092D7024916BE9941520CA9DC41495EABD5435E1BF59971491FA9CD4B5319FBF443541089FC0C03053Q007EDBB9223D030A3Q004669726553657276657203063Q00756E7061636B03043Q0077616974032A3Q0022C14A327779B3F304CB1E2Q7165E1E20FDA1E627276F0E2428E7D676C65F6E9188E6E7E7F74F6CE089403083Q00876CAE3E121E179303083Q0074295C33355FFB5D03073Q009836483F58453E030C3Q00F5C7FA55DBCAD85DD8D1EB4F03043Q003CB4A48E03053Q006851122C3503073Q0072383E6549478D03183Q0047657450726F70657274794368616E6765645369676E616C03053Q009BDC1CE57D03063Q0096CDBD709018030A3Q00F31E0AD6807D8AC11A1403073Q00E6B47F67B3D61C030E3Q00BB044D4BF151C6850B5655EC44E403073Q0080EC653F26842103053Q0056616C756503103Q00EF8B3D6B95C0EA88E6430BE5BF9AE3FB03073Q00AFCCC97124D68B030C3Q0004EE19F3276C8C10EE3668FE03053Q006427AC55BC03053Q009B79B5953603053Q0053CD18D9E003113Q008CF7D1CE33CDB36ABBF6F2D635DCB379BB03083Q001EDE92A1A25AAED2030B3Q00D65A7118F14B623AE44D7B03043Q006A852E1003093Q00436861726163746572030E3Q00436861726163746572412Q64656403043Q005761697403083Q0070357EFD544F512403063Q00203840139C3A03073Q00566563746F72332Q033Q006E6577026Q003540026Q001040025Q00107BC0025Q008047C0025Q00207BC0025Q008079C0025Q009079C0030D3Q004C6F6164416E696D6174696F6E03123Q0047616D65706C6179416E696D6174696F6E7303123Q0053682Q6F74696E67416E696D6174696F6E7303083Q004A756D7073686F7403153Q0077616C6B546F4E656172657374506F736974696F6E03113Q007CAEC07E26C04CB04BAFE36620D14CA34B03083Q00C42ECBB0124FA32D030A3Q009F23731B12FAE3AD276D03073Q008FD8421E7E449B030E3Q009DC91FC6D0B3F1E8A4C11EC3C0A703083Q0081CAA86DABA5C3B7022Q00902449940A4200A7013Q00467Q0012083Q00013Q00124Q00023Q001019000100033Q001243000200013Q00062E00033Q000100012Q00653Q00013Q001035000200040003001243000200013Q00062E00030001000100022Q00653Q00014Q00657Q001035000200050003001243000200013Q00062E00030002000100022Q00653Q00014Q00657Q001035000200060003001243000200013Q00062E00030003000100022Q00653Q00014Q00657Q001035000200070003001243000200013Q00062E00030004000100022Q00658Q00653Q00013Q001035000200080003001243000200013Q00062E00030005000100022Q00658Q00653Q00013Q001035000200090003001243000200013Q00062E00030006000100022Q00658Q00653Q00013Q0010350002000A0003001243000200013Q00065C0002002A000100010004533Q002A00010012430002000B3Q00205F00030002000700205F00040002000600205F0005000200050012430006000C3Q00205F00060006000D0012430007000C3Q00205F00070007000E0012430008000C3Q00205F00080008000F001243000900013Q00065C00090037000100010004533Q003700010012430009000B3Q00205F000A00090007001243000B00103Q00205F000B000B0011001243000C00103Q00205F000C000C001200062E000D0007000100082Q00653Q000C4Q00653Q00064Q00653Q000A4Q00653Q00074Q00653Q00084Q00653Q00054Q00653Q00044Q00653Q000B3Q001243000E00133Q00301C000E00140015001243000E00133Q00301C000E00160017001243000E00133Q00301C000E00180019001243000E00133Q00301C000E001A0015001243000E00133Q00301C000E001B0015001243000E00133Q00301C000E001C001D001243000E001E3Q00205F000E000E001F00205F000E000E002000205F000F000E0021001243001000133Q00205F0010001000222Q00150011000D3Q00122Q001200233Q00122Q001300244Q001A0011001300022Q004200100010001100065D000F0070000100100004533Q0070000100205F000F000E0021001243001000133Q00205F0010001000222Q00150011000D3Q00122Q001200253Q00122Q001300264Q001A0011001300022Q004200100010001100065D000F0070000100100004533Q00700001001243000F00274Q00150010000D3Q00122Q001100283Q00122Q001200294Q001A00100012000200205F0011000E00212Q002C000F001100012Q001F3Q00013Q001243000F001E3Q00206B000F000F002A2Q00150011000D3Q00122Q0012002B3Q00122Q0013002C4Q0077001100134Q0073000F3Q00020012430010001E3Q00206B00100010002A2Q00150012000D3Q00122Q0013002D3Q00122Q0014002E4Q0077001200144Q007300103Q000200206B00110010002F2Q00150013000D3Q00122Q001400303Q00122Q001500314Q001A0013001500022Q004600143Q00032Q00150015000D3Q00122Q001600323Q00122Q001700334Q001A0015001700022Q00150016000D3Q00122Q001700343Q00122Q001800354Q001A0016001800022Q002D0014001500162Q00150015000D3Q00122Q001600363Q00122Q001700374Q001A0015001700022Q00150016000D3Q00122Q001700383Q00122Q001800394Q001A0016001800022Q002D0014001500162Q00150015000D3Q00122Q0016003A3Q00122Q0017003B4Q001A00150017000200207500140015003C2Q002C00110014000100205F0011000E003D00206B00110011003E00062E00130008000100012Q00653Q000F4Q002C0011001300012Q004600113Q00022Q00150012000D3Q00122Q001300403Q00122Q001400414Q001A0012001400020010350011003F001200301C0011000300150012430012001E3Q00206B00120012002A2Q00150014000D3Q00122Q001500423Q00122Q001600434Q0077001400164Q007300123Q000200206B0013001200442Q00150015000D3Q00122Q001600453Q00122Q001700464Q0077001500174Q007300133Q000200206B0014001300442Q00150016000D3Q00122Q001700473Q00122Q001800484Q0077001600184Q007300143Q00020012430015001E3Q00205F00150015004900263C001500CF0001004A0004533Q00CF0001001243001500274Q00150016000D3Q00122Q0017004B3Q00122Q0018004C4Q0077001600184Q002300153Q000100206B00150014004D0012430017004E4Q0015001800114Q005B001700184Q002300153Q00010012430015004F3Q00122Q0016003F4Q00370015000200010004533Q00C500010004533Q00D70001001243001500274Q00150016000D3Q00122Q001700503Q00122Q001800514Q001A0016001800020012430017001E3Q00205F0017001700492Q002C00150017000100062E00150009000100032Q00653Q000D4Q00653Q00104Q00653Q000E4Q0015001600154Q003D00160001000100206B0016000E00442Q00150018000D3Q00122Q001900523Q00122Q001A00534Q00770018001A4Q007300163Q000200206B0017001600442Q00150019000D3Q00122Q001A00543Q00122Q001B00554Q00770019001B4Q007300173Q000200206B0018001700442Q0015001A000D3Q00122Q001B00563Q00122Q001C00574Q0077001A001C4Q007300183Q000200062E0019000A000100042Q00653Q00184Q00653Q000D4Q00653Q00164Q00653Q00123Q00206B001A001800582Q0015001C000D3Q00122Q001D00593Q00122Q001E005A4Q0077001C001E4Q0073001A3Q000200206B001A001A003E2Q0015001C00194Q002C001A001C000100062E001A000B000100012Q00653Q000D3Q00206B001B001200442Q0015001D000D3Q00122Q001E005B3Q00122Q001F005C4Q0077001D001F4Q0073001B3Q000200206B001C001B00442Q0015001E000D3Q00122Q001F005D3Q00122Q0020005E4Q0077001E00204Q0073001C3Q000200205F001D001C005F00263C001D00172Q0100150004533Q00172Q01001243001D00274Q0015001E000D3Q00122Q001F00603Q00122Q002000614Q0077001E00204Q0023001D3Q00012Q0015001D001A4Q003D001D000100010004533Q001D2Q01001243001D00274Q0015001E000D3Q00122Q001F00623Q00122Q002000634Q0077001E00204Q0023001D3Q000100206B001D001C00582Q0015001F000D3Q00122Q002000643Q00122Q002100654Q0077001F00214Q0073001D3Q000200206B001D001D003E00062E001F000C000100032Q00653Q001C4Q00653Q000D4Q00653Q001A4Q002C001D001F0001001243001D001E3Q00206B001D001D002A2Q0015001F000D3Q00122Q002000663Q00122Q002100674Q0077001F00214Q0073001D3Q0002001243001E001E3Q00206B001E001E002A2Q00150020000D3Q00122Q002100683Q00122Q002200694Q0077002000224Q0073001E3Q000200205F001F000E006A00065C001F003D2Q0100010004533Q003D2Q0100205F001F000E006B00206B001F001F006C2Q0039001F0002000200206B0020001F00442Q00150022000D3Q00122Q0023006D3Q00122Q0024006E4Q0077002200244Q007300203Q00022Q0046002100033Q0012430022006F3Q00205F00220022007000122Q002300713Q00122Q002400723Q00122Q002500734Q001A0022002500020012430023006F3Q00205F00230023007000122Q002400743Q00122Q002500723Q00122Q002600754Q001A0023002600020012430024006F3Q00205F00240024007000122Q002500713Q00122Q002600723Q00122Q002700764Q001A0024002700020012430025006F3Q00205F00250025007000122Q002600743Q00122Q002700723Q00122Q002800774Q0077002500284Q000100213Q00012Q000200225Q00206B00230020007800205F0025001E007900205F00250025007A00205F00250025007B2Q001A00230025000200062E0024000D000100052Q00653Q001C4Q00653Q00224Q00653Q000D4Q00653Q00234Q00653Q001D3Q00062E0025000E000100022Q00653Q001C4Q00653Q000D3Q00062E0026000F000100062Q00653Q001C4Q00653Q001F4Q00653Q00214Q00653Q00204Q00653Q00224Q00653Q00243Q0012080026007C3Q001243002600133Q00205F00260026001A0006310026007A2Q013Q0004533Q007A2Q012Q0015002600254Q003D002600010001001243002600133Q00205F00260026001B000631002600852Q013Q0004533Q00852Q0100205F0026001C005F00065C002600852Q0100010004533Q00852Q0100065C002200852Q0100010004533Q00852Q012Q0015002600244Q003D0026000100010012430026001E3Q00206B00260026002A2Q00150028000D3Q00122Q0029007D3Q00122Q002A007E4Q00770028002A4Q007300263Q000200206B0027002600442Q00150029000D3Q00122Q002A007F3Q00122Q002B00804Q00770029002B4Q007300273Q000200206B0028002700442Q0015002A000D3Q00122Q002B00813Q00122Q002C00824Q0077002A002C4Q007300283Q000200122Q002900833Q001243002A001E3Q00205F002A002A004900065D002A009E2Q0100290004533Q009E2Q012Q001F3Q00013Q00062E002A0010000100012Q00653Q000D3Q00062E002B0011000100032Q00653Q00284Q00653Q000D4Q00653Q002A4Q0015002C002B4Q003D002C000100012Q001F3Q00013Q00123Q00013Q00026Q00F03F01074Q002400016Q000A5Q00012Q002400015Q00201B0001000100012Q003F000100014Q0052000100024Q001F3Q00017Q000B3Q00025Q00E06F40026Q007040024Q00E0FFEF40026Q00F040022Q00E03QFFEF41026Q00F041028Q00026Q00F03F027Q004003043Q006D61746803053Q00666C2Q6F72022B3Q00263C00010004000100010004533Q0004000100202200023Q00022Q0052000200023Q00263C00010008000100030004533Q0008000100202200023Q00042Q0052000200023Q00263C0001000C000100050004533Q000C000100202200023Q00062Q0052000200024Q002400026Q000A00023Q00022Q002400036Q000A0001000100032Q00153Q00023Q00122Q000200073Q00122Q000300083Q00122Q000400084Q0024000500013Q00122Q000600083Q00043B00040029000100202200083Q0009002022000900010009001243000A000A3Q00205F000A000A000B002006000B3Q00092Q0039000A00020002001243000B000A3Q00205F000B000B000B002006000C000100092Q0039000B000200022Q00150001000B4Q00153Q000A4Q006C000A0008000900263C000A0027000100090004533Q002700012Q006C00020002000300103E0003000900030004410004001700012Q0052000200024Q001F3Q00017Q000C3Q00025Q00E06F40026Q007040025Q00804440025Q00C06A40024Q00E0FFEF40026Q00F040022Q00E03QFFEF41028Q00026Q00F03F027Q004003043Q006D61746803053Q00666C2Q6F7202303Q00263C00010007000100010004533Q0007000100202200023Q00022Q003F00023Q000200204D00020002000300204D0002000200042Q0052000200023Q00263C0001000D000100050004533Q000D000100202200023Q00062Q003F00023Q000200204D0002000200052Q0052000200023Q00263C00010011000100070004533Q0011000100122Q000200074Q0052000200024Q002400026Q000A00023Q00022Q002400036Q000A0001000100032Q00153Q00023Q00122Q000200083Q00122Q000300093Q00122Q000400094Q0024000500013Q00122Q000600093Q00043B0004002E000100202200083Q000A00202200090001000A001243000A000B3Q00205F000A000A000C002006000B3Q000A2Q0039000A00020002001243000B000B3Q00205F000B000B000C002006000C0001000A2Q0039000B000200022Q00150001000B4Q00153Q000A4Q006C000A00080009000E450009002C0001000A0004533Q002C00012Q006C00020002000300103E0003000A00030004410004001C00012Q0052000200024Q001F3Q00017Q00053Q00028Q00026Q00F03F027Q004003043Q006D61746803053Q00666C2Q6F72021F4Q002400026Q000A00023Q00022Q002400036Q000A0001000100032Q00153Q00023Q00122Q000200013Q00122Q000300023Q00122Q000400024Q0024000500013Q00122Q000600023Q00043B0004001D000100202200083Q0003002022000900010003001243000A00043Q00205F000A000A0005002006000B3Q00032Q0039000A00020002001243000B00043Q00205F000B000B0005002006000C000100032Q0039000B000200022Q00150001000B4Q00153Q000A4Q006C000A0008000900263C000A001B000100020004533Q001B00012Q006C00020002000300103E0003000300030004410004000B00012Q0052000200024Q001F3Q00017Q00053Q0003043Q006D6174682Q033Q00616273028Q0003053Q00666C2Q6F72027Q0040021A3Q001243000200013Q00205F0002000200022Q0015000300014Q00390002000200022Q002400035Q00067400030009000100020004533Q0009000100122Q000200034Q0052000200024Q0024000200014Q000A5Q000200261700010014000100030004533Q00140001001243000200013Q00205F0002000200040010190003000500012Q005E00033Q00032Q0007000200034Q004400025Q0004533Q001900010010190002000500012Q005E00023Q00022Q0024000300014Q000A0002000200032Q0052000200024Q001F3Q00017Q00053Q0003043Q006D6174682Q033Q00616273028Q0003053Q00666C2Q6F72027Q0040021C3Q001243000200013Q00205F0002000200022Q0015000300014Q00390002000200022Q002400035Q00067400030009000100020004533Q0009000100122Q000200034Q0052000200024Q0024000200014Q000A5Q0002000E2A00030015000100010004533Q00150001001243000200013Q00205F0002000200042Q000C000300013Q0010190003000500032Q005E00033Q00032Q0007000200034Q004400025Q0004533Q001B00012Q000C000200013Q0010190002000500022Q005E00023Q00022Q0024000300014Q000A0002000200032Q0052000200024Q001F3Q00017Q00053Q0003043Q006D6174682Q033Q00616273028Q00027Q004003053Q00666C2Q6F7202273Q001243000200013Q00205F0002000200022Q0015000300014Q00390002000200022Q002400035Q00067400030009000100020004533Q0009000100122Q000200034Q0052000200024Q0024000200014Q000A5Q0002000E2A00030020000100010004533Q0020000100122Q000200034Q0024000300013Q0020060003000300040006740003001700013Q0004533Q001700012Q0024000300014Q002400046Q003F0004000400010010190004000400042Q003F000200030004001243000300013Q00205F0003000300052Q000C000400013Q0010190004000400042Q005E00043Q00042Q00390003000200022Q006C0003000300022Q0052000300023Q0004533Q002600012Q000C000200013Q0010190002000400022Q005E00023Q00022Q0024000300014Q000A0002000200032Q0052000200024Q001F3Q00017Q00023Q00026Q00F03F026Q007040023F4Q004600025Q00122Q000300014Q003A00045Q00122Q000500013Q00043B0003003A00012Q002400076Q0015000800024Q0024000900014Q0024000A00024Q0024000B00034Q0024000C00044Q0015000D6Q0015000E00064Q0024000F00054Q0015001000063Q00122Q001100014Q001A000F001100022Q0024001000064Q0015001100063Q00122Q001200014Q001A0010001200022Q006C000F000F00102Q0077000C000F4Q0073000B3Q00022Q0024000C00034Q0024000D00044Q0015000E00014Q0024000F00053Q00122Q001000014Q003A001100014Q000A0011000600112Q001A000F001100022Q0024001000063Q00122Q001100014Q003A001200014Q000A0012000600122Q001A0010001200022Q006C000F000F00102Q0024001000054Q003A001100014Q000A00110006001100104700110001001100122Q001200014Q001A0010001200022Q0024001100064Q003A001200014Q000A00120006001200104700120001001200122Q001300014Q001A0011001300022Q006C0010001000112Q0077000D00104Q004C000C6Q0073000A3Q0002002022000A000A00022Q005B0009000A4Q002300073Q00010004410003000500012Q0024000300074Q0015000400024Q0007000300044Q004400036Q001F3Q00017Q00043Q0003113Q0043617074757265436F6E74726F2Q6C6572030C3Q00436C69636B42752Q746F6E3203073Q00566563746F72322Q033Q006E6577000A4Q00247Q00206B5Q00012Q00373Q000200012Q00247Q00206B5Q0002001243000200033Q00205F0002000200042Q0034000200014Q00235Q00012Q001F3Q00017Q00063Q00030E3Q0046696E6446697273744368696C6403063Q00E9080BCE811003073Q009CA84E40E0D47903093Q00506C6179657247756903063Q0026C88E8032E703043Q00AE678EC5001C3Q00062E5Q000100012Q00568Q0024000100013Q00206B0001000100012Q002400035Q00122Q000400023Q00122Q000500034Q0077000300054Q007300013Q00020006310001000E00013Q0004533Q000E00012Q001500026Q0015000300014Q00370002000200012Q0024000200023Q00205F00020002000400206B0002000200012Q002400045Q00122Q000500053Q00122Q000600064Q0077000400064Q007300023Q00020006310002001B00013Q0004533Q001B00012Q001500036Q0015000400024Q00370003000200012Q001F3Q00013Q00013Q000E3Q00030E3Q0046696E6446697273744368696C6403093Q0097CF01853BA636C4BD03083Q00A7D6894AAB78CE532Q033Q00497341030B3Q00A7FF315CF49488E23B4DEC03063Q00C7EB90523D9803083Q0044697361626C65642Q0103053Q007072696E7403133Q0026309265241EBC280C56AA28151FA93F471FB703043Q004B6776D903043Q004E616D65030C3Q00CE473010B00DC6567C11BD5003063Q007EA7341074D9011D3Q00206B00013Q00012Q002400035Q00122Q000400023Q00122Q000500034Q0077000300054Q007300013Q00020006310001001C00013Q0004533Q001C000100206B0002000100042Q002400045Q00122Q000500053Q00122Q000600064Q0077000400064Q007300023Q00020006310002001C00013Q0004533Q001C000100301C000100070008001243000200094Q002400035Q00122Q0004000A3Q00122Q0005000B4Q001A00030005000200205F00043Q000C2Q002400055Q00122Q0006000D3Q00122Q0007000E4Q0077000500074Q002300023Q00012Q001F3Q00017Q001C3Q0003053Q0056616C756503023Q005F47030B3Q004368616E676556616C756503023Q005870030F3Q0064697361626C6553682Q6F74696E67026Q00F03F0100027Q004003083Q008BE1D4CBACE0D5C303043Q00A4D889BB026Q000840030D3Q00E1F230BCA2F705D5A602BAA9EA03073Q006BB28651D2C69E030A3Q004D756C7469706C696572030E3Q0046696E6446697273744368696C64030C3Q00080283DFAF2A2B94C3A42C1D03053Q00CA586EE2A6030C3Q00F30383EECFD12A94F2C4D71C03053Q00AAA36FE29703083Q002238BD375A3E271603073Q00497150D2582E57030A3Q004669726553657276657203063Q00756E7061636B03053Q007072696E7403053Q00A725DF17E303053Q0087E14CAD7203063Q0009E5B7A4BFF303073Q00C77A8DD8D0CCDD004C4Q00247Q00205F5Q0001001243000100023Q00205F0001000100030006740001004B00013Q0004533Q004B00010012433Q00023Q00205F5Q00040006313Q004B00013Q0004533Q004B00010012433Q00023Q00205F5Q000500065C3Q004B000100010004533Q004B00012Q00465Q000300301C3Q000600072Q0024000100013Q00122Q000200093Q00122Q0003000A4Q001A0001000300020010353Q000800012Q0024000100013Q00122Q0002000C3Q00122Q0003000D4Q001A0001000300020010353Q000B0001001243000100023Q00205F00010001000E2Q0024000200023Q00206B00020002000F2Q0024000400013Q00122Q000500103Q00122Q000600114Q0077000400064Q007300023Q000200065C0002002C000100010004533Q002C00012Q0024000200033Q00206B00020002000F2Q0024000400013Q00122Q000500123Q00122Q000600134Q0077000400064Q007300023Q00020006310002004B00013Q0004533Q004B000100206B00030002000F2Q0024000500013Q00122Q000600143Q00122Q000700154Q0077000500074Q007300033Q00020006310003004B00013Q0004533Q004B000100122Q000400064Q0015000500013Q00122Q000600063Q00043B00040040000100206B000800030016001243000A00174Q0015000B6Q005B000A000B4Q002300083Q00010004410004003A0001001243000400184Q0024000500013Q00122Q000600193Q00122Q0007001A4Q001A0005000700022Q0015000600014Q0024000700013Q00122Q0008001B3Q00122Q0009001C4Q0077000700094Q002300043Q00012Q001F3Q00017Q000A3Q0003023Q005F4703023Q0058700100030F3Q0064697361626C6553682Q6F74696E672Q0103083Q004175746F506C617903093Q004175746F53682Q6F7403053Q007072696E74030A3Q0066A6936327A35E4274D703083Q007045E4DF2C64E871000F3Q0012433Q00013Q00301C3Q000200030012433Q00013Q00301C3Q000400050012433Q00013Q00301C3Q000600030012433Q00013Q00301C3Q000700030012433Q00084Q002400015Q00122Q000200093Q00122Q0003000A4Q0077000100034Q00235Q00012Q001F3Q00017Q00053Q0003053Q0056616C75652Q0103053Q007072696E7403093Q00A5E7E112C5EEE819B303043Q005D86A5AD000D4Q00247Q00205F5Q000100263C3Q000C000100020004533Q000C00010012433Q00034Q0024000100013Q00122Q000200043Q00122Q000300054Q0077000100034Q00235Q00012Q00243Q00024Q003D3Q000100012Q001F3Q00017Q001F3Q0003023Q005F4703093Q004175746F53682Q6F7403053Q0056616C756503093Q00776F726B7370616365030E3Q0046696E6446697273744368696C6403053Q0078C9E95A4903073Q00E03AA885363A9203053Q0042612Q6C7303043Q007B5747F103083Q006B39362B9D15E6E703043Q0077616974026Q00E03F03043Q00506C6179026Q00F03F2Q01027Q004003083Q00E8831EFAADD5C1DC03073Q00AFBBEB7195D9BC026Q000840030D3Q000FBB8042E770763BEFB244EC6D03073Q00185CCFE12C8319030C3Q0057616974466F724368696C64030C3Q007BDFB9551E6F6EC5BD420F6E03063Q001D2BB3D82C7B03083Q008ED12F43A9D02E4B03043Q002CDDB940030A3Q004669726553657276657203063Q00756E7061636B03053Q007072696E74030C3Q0042C56470502AC26C75462FCC03053Q00136187283F004C3Q0012433Q00013Q00205F5Q00020006313Q000B00013Q0004533Q000B00012Q00247Q00205F5Q000300065C3Q000B000100010004533Q000B00012Q00243Q00013Q0006313Q000C00013Q0004533Q000C00012Q001F3Q00013Q0012433Q00043Q00206B5Q00052Q0024000200023Q00122Q000300063Q00122Q000400074Q0077000200044Q00735Q00020006313Q001D00013Q0004533Q001D00010012433Q00043Q00205F5Q000800206B5Q00052Q0024000200023Q00122Q000300093Q00122Q0004000A4Q0077000200044Q00735Q00020006313Q004B00013Q0004533Q004B00010012430001000B3Q00122Q0002000C4Q00370001000200012Q0024000100033Q00206B00010001000D2Q00370001000200012Q004600013Q000300301C0001000E000F2Q0024000200023Q00122Q000300113Q00122Q000400124Q001A0002000400020010350001001000022Q0024000200023Q00122Q000300143Q00122Q000400154Q001A0002000400020010350001001300022Q0024000200043Q00206B0002000200162Q0024000400023Q00122Q000500173Q00122Q000600184Q0077000400064Q007300023Q000200206B0002000200162Q0024000400023Q00122Q000500193Q00122Q0006001A4Q0077000400064Q007300023Q000200206B00020002001B0012430004001C4Q0015000500014Q005B000400054Q002300023Q00012Q0002000200014Q0068000200013Q0012430002001D4Q0024000300023Q00122Q0004001E3Q00122Q0005001F4Q0077000300054Q002300023Q00012Q001F3Q00017Q00093Q0003023Q005F4703083Q004175746F506C617903053Q0056616C756503053Q007072696E74030C3Q00ED7E1F140C1A8B78121F0B6603063Q0051CE3C535B4F03153Q0077616C6B546F4E656172657374506F736974696F6E03043Q0077616974027Q004000163Q0012433Q00013Q00205F5Q00020006313Q001500013Q0004533Q001500012Q00247Q00205F5Q00030006313Q000F00013Q0004533Q000F00010012433Q00044Q0024000100013Q00122Q000200053Q00122Q000300064Q0077000100034Q00235Q00012Q001F3Q00013Q0012433Q00074Q003D3Q000100010012433Q00083Q00122Q000100094Q00373Q000200010004535Q00012Q001F3Q00017Q000F3Q0003043Q0067616D6503073Q00506C6163654964022Q00902449940A4203053Q0056616C756503103Q0048756D616E6F6964522Q6F745061727403083Q00506F736974696F6E03043Q006D61746803043Q006875676503053Q00706169727303093Q006D61676E697475646503063Q004D6F7665546F030E3Q004D6F7665546F46696E697368656403043Q005761697403023Q005F4703093Q004175746F53682Q6F7400333Q0012433Q00013Q00205F5Q000200263C3Q0008000100030004533Q000800012Q00247Q00205F5Q00040006313Q000900013Q0004533Q000900012Q001F3Q00014Q00243Q00013Q00205F5Q000500205F5Q00062Q0064000100013Q001243000200073Q00205F000200020008001243000300094Q0024000400024Q00610003000200050004533Q001900012Q003F000800073Q00205F00080008000A00060E00080019000100020004533Q001900012Q0015000100074Q0015000200083Q00061300030013000100020004533Q001300010006310001003200013Q0004533Q003200012Q0024000300033Q00206B00030003000B2Q0015000500014Q002C0003000500012Q0024000300033Q00205F00030003000C00206B00030003000D2Q00370003000200010012430003000E3Q00205F00030003000F0006310003003200013Q0004533Q003200012Q002400035Q00205F00030003000400065C00030032000100010004533Q003200012Q0024000300043Q00065C00030032000100010004533Q003200012Q0024000300054Q003D0003000100012Q001F3Q00017Q000B3Q0003043Q0067616D6503073Q00506C6179657273030B3Q004C6F63616C506C6179657203093Q00436861726163746572030E3Q00436861726163746572412Q64656403043Q0057616974030C3Q0057616974466F724368696C6403083Q000A4D3AD9D01BEF2603073Q0086423857B8BE7403063Q004D6F7665546F030E3Q004D6F7665546F46696E697368656401163Q001243000100013Q00205F00010001000200205F00010001000300205F00020001000400065C00020009000100010004533Q0009000100205F00020001000500206B0002000200062Q003900020002000200206B0003000200072Q002400055Q00122Q000600083Q00122Q000700094Q0077000500074Q007300033Q000200206B00040003000A2Q001500066Q002C00040006000100205F00040003000B00206B0004000400062Q00370004000200012Q001F3Q00017Q00183Q0003053Q0056616C75652Q0103053Q007072696E7403103Q007F1325943AC004110715208838C90D1003083Q00555C5169DB798B4103043Q0077616974025Q00C0574003073Q00566563746F72332Q033Q006E6577026Q003040026Q000840025Q009079C0026Q00394003043Q0067616D6503073Q00506C6179657273030B3Q004C6F63616C506C6179657203093Q00436861726163746572030C3Q0057616974466F724368696C6403103Q00D5A65D4472D0F4B7624A73CBCDB2425103063Q00BF9DD330251C03083Q00506F736974696F6E03093Q004D61676E6974756465026Q00F03F026Q004E4000334Q00247Q00205F5Q000100263C3Q002E000100020004533Q002E00010012433Q00034Q0024000100013Q00122Q000200043Q00122Q000300054Q0077000100034Q00235Q00010012433Q00063Q00122Q000100074Q00373Q000200010012433Q00083Q00205F5Q000900122Q0001000A3Q00122Q0002000B3Q00122Q0003000C4Q001A3Q000300022Q0024000100024Q001500026Q0037000100020001001243000100063Q00122Q0002000D4Q00370001000200010012430001000E3Q00205F00010001000F00205F00010001001000205F00020001001100206B0002000200122Q0024000400013Q00122Q000500133Q00122Q000600144Q0077000400064Q007300023Q000200205F0003000200152Q003F000400033Q00205F000400040016000E2A0017002E000100040004533Q002E0001001243000400063Q00122Q000500184Q00370004000200012Q0024000400024Q001500056Q00370004000200010012433Q00063Q00122Q000100174Q00373Q000200010004535Q00012Q001F3Q00017Q00", GetFEnv(), ...);
